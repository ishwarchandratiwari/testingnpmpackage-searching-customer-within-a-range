{"ast":null,"code":"// Calculating distance between two latitude-longitude points (Haversine formula)\n//https://www.movable-type.co.uk/scripts/latlong.html\n//https://en.wikipedia.org/wiki/Haversine_formula\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, distance) {\n  var R = 6371; // Radius of the earth in km\n\n  var dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n\n  return d <= distance; //<=100KM\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nmodule.exports = getDistanceFromLatLonInKm; // 'use strict';\n// function gdistance(latitude1, longitude1, latitude2, longitude2, radius) {\n//     if (!latitude1 || !longitude1 || !latitude2 || !longitude2) { \n//         return null; \n//     };\n//     var lat1 = Number(latitude1), lon1 = Number(longitude1);\n//     var lat2 = Number(latitude2), lon2 = Number(longitude2);\n//     radius = (radius === undefined) ? 6371e3 : Number(radius);\n//     var R = radius;\n//     var φ1 = (lat1 * Math.PI / 180), λ1 = (lon1 * Math.PI / 180);\n//     var φ2 = (lat2 * Math.PI / 180), λ2 = (lon2 * Math.PI / 180);\n//     var Δφ = φ2 - φ1;\n//     var Δλ = λ2 - λ1;\n//     var a = Math.sin(Δφ/2) * Math.sin(Δφ/2)\n//           + Math.cos(φ1) * Math.cos(φ2)\n//           * Math.sin(Δλ/2) * Math.sin(Δλ/2);\n//     var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n//     var d = R * c;     // Meters\n//     var d2 = d / 1000; // Meters to KM\n//     return d2; \n// }\n// module.exports = gdistance;","map":{"version":3,"sources":["/Users/ishwar/Desktop/npm/testingnpmpackage-searching-customer-within-a-range/node_modules/searching-customer-within-a-range/src/distanceCalculator.js"],"names":["getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","distance","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI","module","exports"],"mappings":"AACA;AACA;AACA;AAKA,SAASA,yBAAT,CAAmCC,IAAnC,EAAwCC,IAAxC,EAA6CC,IAA7C,EAAkDC,IAAlD,EAAuDC,QAAvD,EAAiE;AAC7D,MAAIC,CAAC,GAAG,IAAR,CAD6D,CAC/C;;AACd,MAAIC,IAAI,GAAGC,OAAO,CAACL,IAAI,GAACF,IAAN,CAAlB,CAF6D,CAE7B;;AAChC,MAAIQ,IAAI,GAAGD,OAAO,CAACJ,IAAI,GAACF,IAAN,CAAlB;AACA,MAAIQ,CAAC,GACHC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GACAI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACP,IAAD,CAAhB,IAA0BU,IAAI,CAACE,GAAL,CAASL,OAAO,CAACL,IAAD,CAAhB,CAA1B,GACAQ,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CADA,GACmBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CAHrB;AAKA,MAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAEN,CAAZ,CAAzB,CAAZ;AACA,MAAIO,CAAC,GAAGX,CAAC,GAAGQ,CAAZ,CAV6D,CAU9C;;AACf,SAAOG,CAAC,IAAEZ,QAAV,CAX6D,CAW1C;AACpB;;AAED,SAASG,OAAT,CAAiBU,GAAjB,EAAsB;AACpB,SAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAQ,GAAZ,CAAV;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBrB,yBAAjB,C,CA8BF;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["\n// Calculating distance between two latitude-longitude points (Haversine formula)\n//https://www.movable-type.co.uk/scripts/latlong.html\n//https://en.wikipedia.org/wiki/Haversine_formula\n\n\n\n\nfunction getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2,distance) {\n    var R = 6371; // Radius of the earth in km\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\n    var dLon = deg2rad(lon2-lon1); \n    var a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n      Math.sin(dLon/2) * Math.sin(dLon/2)\n      ; \n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n    var d = R * c; // Distance in km\n    return d<=distance;//<=100KM\n  }\n  \n  function deg2rad(deg) {\n    return deg * (Math.PI/180)\n  }\n\n  module.exports = getDistanceFromLatLonInKm;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 'use strict';\n\n// function gdistance(latitude1, longitude1, latitude2, longitude2, radius) {\n//     if (!latitude1 || !longitude1 || !latitude2 || !longitude2) { \n//         return null; \n//     };\n\n//     var lat1 = Number(latitude1), lon1 = Number(longitude1);\n//     var lat2 = Number(latitude2), lon2 = Number(longitude2);\n\n//     radius = (radius === undefined) ? 6371e3 : Number(radius);\n\n//     var R = radius;\n//     var φ1 = (lat1 * Math.PI / 180), λ1 = (lon1 * Math.PI / 180);\n//     var φ2 = (lat2 * Math.PI / 180), λ2 = (lon2 * Math.PI / 180);\n//     var Δφ = φ2 - φ1;\n//     var Δλ = λ2 - λ1;\n\n//     var a = Math.sin(Δφ/2) * Math.sin(Δφ/2)\n//           + Math.cos(φ1) * Math.cos(φ2)\n//           * Math.sin(Δλ/2) * Math.sin(Δλ/2);\n//     var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n//     var d = R * c;     // Meters\n//     var d2 = d / 1000; // Meters to KM\n//     return d2; \n// }\n\n// module.exports = gdistance;"]},"metadata":{},"sourceType":"script"}